library(leaps)
library(olsrr)
install.packages("olsrr")
library(datasets)
data(mtcars)
View(mtcars)
model <- lm(mpg ~ 1, data=mtcars)
summary(model)
model <- update(model, . ~ . +cyl)
summary(model)
model <- update(model, . ~ . +disp)
summary(model)
model <- update(model, . ~ . +hp)
summary(model) # too much
model <- update(model, . ~ . -hp)
summary(model)
model <- update(model, . ~ . +drat)
summary(model) # too much
#1
data("airquality")
View(airquality)
colnames(airquality)
#3
modelAir <- lm(airquality$Temp ~ 1)
smmary(modelAir)
summary(modelAir)
#3
modelAir <- lm(Temp ~ 1, data=airquality)
summary(modelAir)
modelAir <- update(modelAir, . ~ . +Ozone)
summary(modelAir)
#2
modelAir <-lm(Temp~., data=airquality)
summary(modelAir)
library(olsrr)
modelAir <-lm(Temp~Ozone+Wind+Solar.R+Month, data=airquality)
summary(modelAir)
#3
modelAir <- lm(Temp ~ 1, data=airquality)
summary(modelAir)
# we add all the possible other parameters and choose the one with the lowest p-value:
intermediateModel <- update(modelAir, . ~ . +Solar.R)
summary(modelAir)
#well begin with the Ozone dependance
modelAir <- update(modelAir, . ~ . +Ozone)
summary(modelAir)
# we add all the possible other parameters and choose the one with the lowest p-value:
intermediateModel <- update(modelAir, . ~ . +Solar.R)
summary(modelAir)
intermediateModel <- update(modelAir, . ~ . +Wind)
summary(modelAir)
colnames(airquality)
#well begin with the Ozone dependance
modelAir <- update(modelAir, . ~ . +Ozone)
summary(modelAir)
# we add all the possible other parameters and choose the one with the lowest p-value:
intermediateModel <- update(modelAir, . ~ . +Solar.R)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Wind)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Month)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Days)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Days)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Wind)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Month)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Days)
summary(intermediateModel)
colnames(airquality)
intermediateModel <- update(modelAir, . ~ . +Month)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Days)
summary(intermediateModel)
# The variable Month is the one with the least p-value, we add it:
modelAir <- update(modelAir, . ~ . +Month)
summary(modelAir)
# we proceed with the same idea
intermediateModel <- update(modelAir, . ~ . +Solar.R)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Wind)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Days)
summary(intermediateModel)
summary(intermediateModel)
colnames(airquality)
intermediateModel <- update(modelAir, . ~ . +Day)
summary(intermediateModel)
# we proceed with the same idea
intermediateModel <- update(modelAir, . ~ . +Solar.R)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Wind)
summary(intermediateModel)
intermediateModel <- update(modelAir, . ~ . +Day)
summary(intermediateModel)
#4
library(MASS)
modelAirMASS <- lm(mpg ~ 1, data=airquality)
summary(modelAirMASS)
#4
library(MASS)
modelAirMASS <- lm(mpg ~ 1, data=airquality)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
summary(modelAirMASS)
model_forwardAirMass <- stepAIC(model, trace = TRUE, direction="forward")
modelAirMass <- stepAIC(modelAirMass, trace = TRUE, direction="forward")
modelAirMASS <- stepAIC(modelAirMASS, trace = TRUE, direction="forward")
summary(modelAirMASS)
modelAirMASS <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=model_full)
scopedModelFull <- llm(Temp ~ ., data=airquality)
summary(scopedModelFull)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- lm(Temp ~ ., data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASS <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=model_full)
modelAirMASS <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
summary(scopedModelFull)
scopedModelFull <- lm(Temp ~ ., data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
summary(modelAirMASSForward)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
modelAirMASS <- lm(Temp ~ 1+Ozone, data=airquality)
scopedModelFull <- lm(Temp ~ ., data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
summary(modelAirMASSForward)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- lm(Temp ~ ., data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
summary(modelAirMASSForward)
library(leaps)
library(olsrr)
scopedModelFull <- formula(Temp ~ ., data=airquality)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- formula(Temp ~ ., data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
summary(modelAirMASSForward)
scopedModelFull <- formula(Temp ~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
summary(modelAirMASSForward)
modelAirMASSForward$anova
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="both", scope=scopedModelFull)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- formula(Temp ~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
modelAirMASSForward$anova
#4
library(MASS)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- formula(Temp ~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
#2.1.1
model <- lm(mpg~ cyl + disp + hp + wt +qsec. data=mtcars)
ols_step_all_possible(model)
ols_best_subset(model)
ols_step_best_subset(model)
#2.1.2
model_subsets <- regsubsets(mpg ~ disp + hp + wt + qsec,data=mtcars, nbest = 2, nvmax = 13)
names(summary(model_subsets))
summary(model_subsets)$which
#2.1.1
model <- lm(Temp~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
ols_step_all_possible(model)
ols_step_best_subset(model)
#2.1.2
model_subsets <- regsubsets(Temp~ Ozone+Wind+Solar.R+Month+Day,data=airquality, nbest = 2, nvmax = 13)
names(summary(model_subsets))
summary(model_subsets)$which
par(mfrow=c(1,2))
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
#2.1.2
model_subsets <- regsubsets(Temp~ Ozone+Wind+Solar.R+Month+Day,data=airquality, nbest = 2, nvmax = 13)
names(summary(model_subsets))
# all the possible subsets
summary(model_subsets)$which
par(mfrow=c(1,2))
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
summary(model_subsets)
summary(model_subsets)$adjr2
summary(model_subsets)$bic
which(summary(model_subset)$bic == min(summary(model_subset)$bic))
summary(model_subset)$which[3,]
which(summary(model_subsets)$bic == min(summary(model_subset)$bic))
summary(model_subsets)$which[3,]
which(summary(model_subsets)$bic == min(summary(model_subsets)$bic))
summary(model_subsets)$which[3,]
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
par(mfrow=c(1,2))
#1
model <- lm(Temp~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
ols_step_all_possible(model)
ols_step_all_possible(model)
ols_step_all_possible(model)
#2
ols_step_best_subset(model)
#2
ols_step_best_subset(model)
#2
ols_step_best_subset(model)
source('~/Desktop/MatCAD/AnalisisDatosComplejos/Practice3.R')
#4
model_subsets <- regsubsets(Temp~ Ozone+Wind+Solar.R+Month+Day,data=airquality, nbest = 2, nvmax = 13)
names(summary(model_subsets))
# all the possible subsets
summary(model_subsets)$which
par(mfrow=c(1,2))
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
summary(model_subsets)$adjr2
summary(model_subsets)$bic
# we see the parameters we can consult about the subset regressions
names(summary(model_subsets))
# all the possible subsets
summary(model_subsets)$which
# we see the adjusted r squared and the bic parameters obtained
summary(model_subsets)$adjr2
summary(model_subsets)$bic
par(mfrow=c(1,2))
plot(model_subsets, scale="adjr", main=expression(R[Adj]^2))
plot(model_subsets, scale="bic", main="BIC")
# this fact that we saw graphically can be obtained accessing to the matrix in the position
which(summary(model_subsets)$bic == min(summary(model_subsets)$bic))
# this fact that we saw graphically can be obtained accessing to the matrix in the position
bestPosition = which(summary(model_subsets)$bic == min(summary(model_subsets)$bic))
summary(model_subsets)$which[bestPosition,]
summary(model_subsets)$bic
#4
library(MASS)
modelAirMASS <- lm(Temp ~ 1, data=airquality)
scopedModelFull <- formula(Temp ~ Ozone+Wind+Solar.R+Month+Day, data=airquality)
summary(modelAirMASS)
summary(scopedModelFull)
summary(modelAirMASS)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
modelAirMASSForward$anova
summary(modelAirMASS)
summary(scopedModelFull)
modelAirMASSForward <- stepAIC(modelAirMASS, trace = TRUE, direction="forward", scope=scopedModelFull)
